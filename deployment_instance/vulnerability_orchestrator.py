from collections import defaultdict

# Base Vulnerability Class
class Vulnerability:
    def __init__(self, host, name):
        self.name = name
        self.host = host
        self.params = {'host': host}
        self.path = "vulnerabilities/" + self.name + ".yml"

    def set_params(self, params):
        self.params = {**self.params, **params}

    def print_self(self):
        print("Host: ", self.host)
        print("  Name: ", self.name)
        print("  Params: ", self.params)
        print("  Path: ", self.path)

    
# Vulnerability Orchestrator
class VulnerabilityOrchestrator:
    def __init__(self, ansible_runner) -> None:
        self.ansible_runner = ansible_runner
        self.vulnerabilities = defaultdict(list)
    
    def __add_vulnerability(self, vuln: Vulnerability):
        self.vulnerabilities[vuln.host].append[vuln]
        self.ansible_runner.run_playbook(vuln.path, playbook_params=vuln.params)

    def get_vulnerabilities(self):
        return self.vulnerabilities

    def print_vulnerabilities(self):
        for host, vulns in self.vulnerabilities.items():
            print("Host: ", host)
            print("Vuln: ")
            for vuln in vulns:
                print("  -  %s\t%s\n" % (vuln.name, vuln.path) )
                print("     Params: " + str(vuln.params) + "\n")

    def add_ftpAccess(self, host: str):
        # self.__add_vulnerability(FTPAccess(host))
        self.__add_vulnerability(Vulnerability(host, "FTPAccess"))

    def add_netcatShell(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "NetcatShell"))
    
    def add_nostromoRCE(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "NostromoRCE"))

    def add_rsync(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "rsync"))

    def add_sshAuthorizedKeysPersistence(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "sshAuthorizedKeysPersistence"))
    
    def add_sshEnablePasswordLogin(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "sshEnablePasswordLogin"))

    def add_vsftpdBackdoor(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "vsftpdBackdoor"))

    def add_weakUserPassword(self, host: str, user: str):
        vuln = Vulnerability(host, "weakUserPassword")
        vuln.set_params({'user': user})
        self.__add_vulnerability(vuln)


    def add_writeablePassword(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "writeablePasswd"))

    def add_writeableSudoers(self, host: str):
        self.__add_vulnerability(Vulnerability(host, "writeableSudoers"))